/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JTextArea;
import server.ServerInterface;
import server.Usuario;
import java.io.File;
import org.apache.commons.io.FileUtils;

public class Cliente extends javax.swing.JFrame {
  private final Usuario usuario;
  private final ServerInterface interf;
  private HashMap<String, JTextArea> tabs;
  private HashMap<String, Usuario> amigosConectados;


  public Cliente(Usuario usuario, ServerInterface interf) {
    initComponents();
    this.usuario = usuario;
    this.interf = interf;
    this.tabs = new HashMap<>();
    this.amigosConectados= new HashMap<>();
    this.txtEnviar.setEditable(false);
    this.txtNombreUsuario.setText("Usuario: " + usuario.getNombre());
    this.addWindowListener(new WindowAdapter(){
      @Override
      public void windowClosing(WindowEvent evt) {
        salir();
      }
    });
    try {
      ClientInterface interfCl = new ClientImpl(this);
      this.usuario.setIface(interfCl);
      this.interf.registerForCallback(usuario);
    } catch (RemoteException e) {
      System.out.println("Excepcion en el registro callback:  " + e);
    }

  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    listaConectados = new javax.swing.JList<>();
    chats = new javax.swing.JTabbedPane();
    jScrollPane2 = new javax.swing.JScrollPane();
    txtEnviar = new javax.swing.JTextArea();
    btnEnviar = new javax.swing.JButton();
    txtNombreUsuario = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jLabel1.setText("Amigos");

    listaConectados.setModel(new DefaultListModel()
    );
    listaConectados.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        listaConectadosMouseClicked(evt);
      }
    });
    jScrollPane1.setViewportView(listaConectados);

    txtEnviar.setColumns(20);
    txtEnviar.setRows(5);
    jScrollPane2.setViewportView(txtEnviar);

    btnEnviar.setText("Enviar");
    btnEnviar.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnEnviarActionPerformed(evt);
      }
    });

    txtNombreUsuario.setText("Usuario:");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                            .addGap(49, 49, 49)
                                                            .addComponent(jLabel1)
                                                            .addGap(64, 64, 64))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addContainerGap()
                                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                            .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(chats)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addContainerGap()
                                            .addComponent(txtNombreUsuario)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addContainerGap())
    );
    layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(txtNombreUsuario)
                            .addGap(62, 62, 62)
                            .addComponent(jLabel1)
                            .addGap(11, 11, 11)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(chats)
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jScrollPane2)
                                                    .addComponent(btnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(3, 3, 3))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>

  private void listaConectadosMouseClicked(java.awt.event.MouseEvent evt) {
    String nombre = this.listaConectados.getSelectedValue();
    if(nombre != null){
      if(tabs.containsKey(nombre)){
        this.chats.setSelectedComponent(tabs.get(nombre));
      }
      else{
        this.creaChat(nombre);
      }
    }
  }

  private void btnEnviarActionPerformed(java.awt.event.ActionEvent evt) {
    String texto = this.txtEnviar.getText();
    int selectedIndex = this.chats.getSelectedIndex();
    if(selectedIndex > -1 && amigosConectados.containsKey(this.chats.getTitleAt(selectedIndex))){
      Usuario amigo = amigosConectados.get(this.chats.getTitleAt(this.chats.getSelectedIndex()));
      try {
        amigo.getIface().recibirMensaje(this.usuario.getNombre(), texto);
        this.tabs.get(amigo.getNombre()).append(formatearMensaje(this.usuario.getNombre(), texto));
      } catch (RemoteException ex) {
        Logger.getLogger(Cliente.class.getName()).log(Level.SEVERE, null, ex);
      }
    }
    this.txtEnviar.setText("");
  }

  private void creaChat(String nombre){
    JTextArea txt = new JTextArea();
    txt.setEditable(false);
    chats.addTab(nombre, txt);
    tabs.put(nombre, txt);
    this.chats.setSelectedComponent(tabs.get(nombre));
    this.txtEnviar.setEditable(true);
    File conver = new File( this.usuario.getNombre() + "_" + nombre + ".txt");
    try {
      if (conver.exists()) {
        txt.setText(FileUtils.readFileToString(conver, StandardCharsets.UTF_8.name()));
      }
    } catch (IOException ex) {
      System.out.println("Excepcion al leer la conversacion: " + ex);
    }
  }

  public void conexionAmigo(Usuario amigo){
    this.amigosConectados.put(amigo.getNombre(), amigo);
    DefaultListModel lista = (DefaultListModel)this.listaConectados.getModel();
    lista.addElement(amigo.getNombre());
  }

  public void desconexionAmigo(Usuario amigo){
    this.amigosConectados.remove(amigo.getNombre());
    DefaultListModel lista = (DefaultListModel)this.listaConectados.getModel();
    lista.removeElement(amigo.getNombre());
  }

  public void recibirMensaje(String nombre, String mensaje){
    if(tabs.containsKey(nombre)){
      this.chats.setSelectedComponent(tabs.get(nombre));
    }
    else{
      this.creaChat(nombre);
    }
    this.tabs.get(nombre).append(formatearMensaje(nombre, mensaje));
  }


  private String formatearMensaje(String nombre, String mensaje){
    return nombre + ": " + mensaje + "\n";
  }

  private void salir(){
    try {
      this.interf.unregisterForCallback(this.usuario);
    } catch (RemoteException e) {
      System.out.println("Excepcion en al elminar del registro callback o desconectarse de la BD: " + e);
    }
    Iterator it = tabs.entrySet().iterator();
    while (it.hasNext()) {  //antes de salir guardo las conversaciones en ficheros
      Map.Entry pair = (Map.Entry)it.next();
      File conver = new File( this.usuario.getNombre() + "_" + pair.getKey() + ".txt");
      try {
        FileUtils.writeStringToFile(conver, ((JTextArea)pair.getValue()).getText() ,StandardCharsets.UTF_8.name());
      } catch (IOException ex) {
        System.out.println("Excepcion al leer la conversacion: " + ex);
      }

      it.remove(); // elimino cada elemento y me aseguro evitar ConcurrentModificationException
    }
  }

  // Variables declaration - do not modify
  private javax.swing.JButton btnEnviar;
  private javax.swing.JTabbedPane chats;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JList<String> listaConectados;
  private javax.swing.JTextArea txtEnviar;
  private javax.swing.JLabel txtNombreUsuario;
  // End of variables declaration
}
